{
  "name": "AsciiDoc",
  "scopeName": "text.asciidoc",
  "fileTypes": [
    "ad",
    "asc",
    "adoc",
    "asciidoc",
    "adoc.txt"
  ],
  "limitLineLength": false,
  "maxTokensPerLine": 100,
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#callout-list-item"
    },
    {
      "include": "#titles"
    },
    {
      "include": "#attribute-entry"
    },
    {
      "include": "#blocks"
    },
    {
      "include": "#block-title"
    },
    {
      "include": "#tables"
    },
    {
      "include": "#horizontal-rule"
    },
    {
      "include": "#list"
    },
    {
      "include": "#inlines"
    },
    {
      "include": "#block-attribute"
    },
    {
      "include": "#line-break"
    }
  ],
  "repository": {
    "blocks": {
      "patterns": [
        {
          "include": "#front-matter-block"
        },
        {
          "include": "#comment-paragraph"
        },
        {
          "include": "#admonition-paragraph"
        },
        {
          "include": "#quote-paragraph"
        },
        {
          "include": "#listing-paragraph"
        },
        {
          "include": "#source-paragraphs"
        },
        {
          "include": "#passthrough-paragraph"
        },
        {
          "include": "#example-paragraph"
        },
        {
          "include": "#sidebar-paragraph"
        },
        {
          "include": "#literal-paragraph"
        },
        {
          "include": "#open-block"
        }
      ]
    },
    "source-paragraphs": {
      "patterns": [
        {
          "include": "#source-asciidoctor"
        },
        {
          "include": "#source-markdown"
        }
      ]
    },
    "tables": {
      "patterns": [
        {
          "include": "#table-psv"
        },
        {
          "include": "#table-nested"
        },
        {
          "include": "#table-csv"
        },
        {
          "include": "#table-dsv"
        }
      ]
    },
    "tables-includes": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#callout-list-item"
        },
        {
          "include": "#attribute-entry"
        },
        {
          "include": "#block-title"
        },
        {
          "include": "#explicit-paragraph"
        },
        {
          "include": "#section"
        },
        {
          "include": "#blocks"
        },
        {
          "include": "#list"
        },
        {
          "include": "#inlines"
        },
        {
          "include": "#line-break"
        }
      ]
    },
    "inlines": {
      "patterns": [
        {
          "include": "#typographic-quotes"
        },
        {
          "include": "#strong"
        },
        {
          "include": "#monospace"
        },
        {
          "include": "#emphasis"
        },
        {
          "include": "#superscript"
        },
        {
          "include": "#subscript"
        },
        {
          "include": "#mark"
        },
        {
          "include": "#general-block-macro"
        },
        {
          "include": "#anchor-macro"
        },
        {
          "include": "#footnote-macro"
        },
        {
          "include": "#image-macro"
        },
        {
          "include": "#kbd-macro"
        },
        {
          "include": "#link-macro"
        },
        {
          "include": "#stem-macro"
        },
        {
          "include": "#menu-macro"
        },
        {
          "include": "#passthrough-macro"
        },
        {
          "include": "#xref-macro"
        },
        {
          "include": "#attribute-reference"
        },
        {
          "include": "#characters"
        },
        {
          "include": "#bibtex-macro"
        },
        {
          "include": "#bibliography-anchor"
        }
      ]
    },
    "attribute-entry": {
      "patterns": [
        {
          "name": "meta.definition.attribute-entry.asciidoc",
          "begin": "^(:)(!?\\w.*?)(:)(\\p{Blank}+.+\\p{Blank}(?:\\+|\\\\))$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.attribute-entry.asciidoc"
            },
            "2": {
              "name": "support.constant.attribute-name.asciidoc"
            },
            "3": {
              "name": "punctuation.separator.attribute-entry.asciidoc"
            },
            "4": {
              "name": "string.unquoted.attribute-value.asciidoc",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#hard-break-backslash"
                },
                {
                  "include": "#line-break"
                },
                {
                  "include": "#line-break-backslash"
                }
              ]
            }
          },
          "contentName": "string.unquoted.attribute-value.asciidoc",
          "patterns": [
            {
              "include": "#inlines"
            },
            {
              "include": "#hard-break-backslash"
            },
            {
              "include": "#line-break"
            },
            {
              "include": "#line-break-backslash"
            }
          ],
          "end": "^\\p{Blank}+.+$(?<!\\+|\\\\)|^\\p{Blank}*$",
          "endCaptures": {
            "0": {
              "name": "string.unquoted.attribute-value.asciidoc"
            }
          }
        },
        {
          "name": "meta.definition.attribute-entry.asciidoc",
          "match": "^(:)(!?\\w.*?)(:)(\\p{Blank}+(.*))?$",
          "captures": {
            "1": {
              "name": "punctuation.separator.asciidoc"
            },
            "2": {
              "name": "support.constant.attribute-name.asciidoc"
            },
            "3": {
              "name": "punctuation.separator.asciidoc"
            },
            "4": {
              "name": "string.unquoted.attribute-value.asciidoc",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#line-break"
                }
              ]
            }
          }
        }
      ]
    },
    "block-attribute": {
      "patterns": [
        {
          "match": "^\\[(|\\p{Blank}*[\\p{Word}\\{,.#\"'%].*)\\]$",
          "name": "markup.heading.block-attribute.asciidoc",
          "captures": {
            "0": {
              "patterns": [
                {
                  "include": "#block-attribute-inner"
                }
              ]
            }
          }
        }
      ]
    },
    "block-attribute-inner": {
      "patterns": [
        {
          "comment": "separators",
          "name": "punctuation.separator.asciidoc",
          "match": "([,.#%])"
        },
        {
          "comment": "blockname",
          "match": "(?<=\\[)([^\\[\\],.#%=]+)",
          "captures": {
            "0": {
              "name": "markup.meta.attribute-list.asciidoc",
              "patterns": [
                {
                  "include": "#keywords"
                }
              ]
            }
          }
        },
        {
          "comment": "attributes",
          "name": "markup.meta.attribute-list.asciidoc",
          "match": "(?<=\\{|,|.|#|\"|'|%)([^\\],.#%]+)",
          "captures": {
            "0": {
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            }
          }
        }
      ]
    },
    "block-callout": {
      "patterns": [
        {
          "name": "callout.source.code.asciidoc",
          "match": "(?:(?:\\/\\/|#|--|;;) ?)?( )?(?<!\\\\)(<)!?(--|)(\\d+)\\3(>)(?=(?: ?<!?\\3\\d+\\3>)*$)",
          "captures": {
            "2": {
              "name": "constant.other.symbol.asciidoc"
            },
            "4": {
              "name": "constant.numeric.asciidoc"
            },
            "5": {
              "name": "constant.other.symbol.asciidoc"
            }
          }
        }
      ]
    },
    "block-title": {
      "patterns": [
        {
          "begin": "^\\.([^\\p{Blank}.].*)",
          "captures": {
            "1": {
              "name": "markup.heading.blocktitle.asciidoc"
            }
          },
          "end": "$"
        }
      ]
    },
    "callout-list-item": {
      "patterns": [
        {
          "name": "callout.asciidoc",
          "match": "^(<)(\\d+)(>)\\p{Blank}+(.*)$",
          "captures": {
            "1": {
              "name": "constant.other.symbol.asciidoc"
            },
            "2": {
              "name": "constant.numeric.asciidoc"
            },
            "3": {
              "name": "constant.other.symbol.asciidoc"
            },
            "4": {
              "patterns": [
                {
                  "include": "#inlines"
                }
              ]
            }
          }
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.asciidoc",
          "begin": "^(/{4,})$",
          "patterns": [
            {
              "include": "#inlines"
            }
          ],
          "end": "^\\1$"
        },
        {
          "name": "comment.inline.asciidoc",
          "match": "^/{2}([^/].*)?$"
        }
      ]
    },
    "hard-break-backslash": {
      "patterns": [
        {
          "match": "(?<=\\S)\\p{Blank}+(\\+ \\\\)$",
          "captures": {
            "1": {
              "name": "constant.other.symbol.hard-break.asciidoc"
            }
          }
        }
      ]
    },
    "horizontal-rule": {
      "patterns": [
        {
          "name": "constant.other.symbol.horizontal-rule.asciidoc",
          "match": "^(?:'|<){3,}$|^ {0,3}([-\\*'])( *)\\1\\2\\1$"
        }
      ]
    },
    "include-directive": {
      "patterns": [
        {
          "match": "^(include)(::)([^\\[]+)(\\[)(.*?)(\\])$",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "punctuation.separator.asciidoc"
            },
            "3": {
              "name": "markup.link.asciidoc",
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "4": {
              "name": "punctuation.separator.asciidoc"
            },
            "5": {
              "name": "string.unquoted.asciidoc",
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "6": {
              "name": "punctuation.separator.asciidoc"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "Admonition",
          "name": "entity.name.function.asciidoc",
          "match": "(NOTE|TIP|IMPORTANT|WARNING|CAUTION)"
        },
        {
          "comment": "Paragraph or verbatim",
          "name": "entity.name.function.asciidoc",
          "match": "(comment|example|literal|listing|normal|pass|quote|sidebar|source|verse|abstract|partintro)"
        },
        {
          "comment": "Diagram",
          "name": "entity.name.function.asciidoc",
          "match": "(actdiag|blockdiag|ditaa|graphviz|tikz|meme|mermaid|nwdiag|packetdiag|pikchr|plantuml|rackdiag|seqdiag|shaape|wavedrom)"
        },
        {
          "comment": "Others",
          "name": "entity.name.function.asciidoc",
          "match": "(sect[1-4]|preface|colophon|dedication|glossary|bibliography|synopsis|appendix|index|normal|partintro|music|latex|stem)"
        }
      ]
    },
    "line-break-backslash": {
      "patterns": [
        {
          "match": "(?<=\\S)\\p{Blank}+(\\\\)$",
          "captures": {
            "1": {
              "name": "variable.line-break.asciidoc"
            }
          }
        }
      ]
    },
    "line-break": {
      "patterns": [
        {
          "match": "(?<=\\S)\\p{Blank}+(\\+)$",
          "captures": {
            "1": {
              "name": "variable.line-break.asciidoc"
            }
          }
        }
      ]
    },
    "list": {
      "patterns": [
        {
          "match": "^\\s*(-)\\p{Blank}(\\[[\\p{Blank}\\*x]\\])(?=\\p{Blank})",
          "name": "markup.todo.asciidoc",
          "captures": {
            "1": {
              "name": "markup.list.bullet.asciidoc"
            },
            "2": {
              "name": "markup.todo.box.asciidoc"
            }
          }
        },
        {
          "name": "markup.list.asciidoc",
          "match": "^\\p{Blank}*(-|\\*{1,5}|\\u2022{1,5})(?=\\p{Blank})",
          "captures": {
            "1": {
              "name": "markup.list.bullet.asciidoc"
            }
          }
        },
        {
          "name": "markup.list.asciidoc",
          "match": "^\\p{Blank}*(\\.{1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))(?=\\p{Blank})",
          "captures": {
            "1": {
              "name": "markup.list.bullet.asciidoc"
            }
          }
        },
        {
          "name": "markup.heading.list.asciidoc",
          "match": "^\\p{Blank}*(.*?\\S)(:{2,4}|;;)($|\\p{Blank}+)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#link-macro"
                },
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "2": {
              "name": "markup.list.bullet.asciidoc"
            }
          }
        }
      ]
    },
    "titles": {
      "patterns": [
        {
          "name": "markup.heading.heading-5.asciidoc",
          "begin": "^((?:=|#){6})([\\p{Blank}]+)(?=\\S+)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "markup.heading.marker.asciidoc"
            },
            "2": {
              "name": "markup.heading.space.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "markup.heading.heading-4.asciidoc",
          "begin": "^((?:=|#){5})([\\p{Blank}]+)(?=\\S+)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "markup.heading.marker.asciidoc"
            },
            "2": {
              "name": "markup.heading.space.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "markup.heading.heading-3.asciidoc",
          "begin": "^((?:=|#){4})([\\p{Blank}]+)(?=\\S+)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "markup.heading.marker.asciidoc"
            },
            "2": {
              "name": "markup.heading.space.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "markup.heading.heading-2.asciidoc",
          "begin": "^((?:=|#){3})([\\p{Blank}]+)(?=\\S+)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "markup.heading.marker.asciidoc"
            },
            "2": {
              "name": "markup.heading.space.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "markup.heading.heading-1.asciidoc",
          "begin": "^((?:=|#){2})([\\p{Blank}]+)(?=\\S+)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "markup.heading.marker.asciidoc"
            },
            "2": {
              "name": "markup.heading.space.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "markup.heading.heading-0.asciidoc",
          "begin": "^((?:=|#){1})([\\p{Blank}]+)(?=\\S+)",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "markup.heading.marker.asciidoc"
            },
            "2": {
              "name": "markup.heading.space.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "anchor-macro": {
      "patterns": [
        {
          "name": "markup.other.anchor.asciidoc",
          "match": "(?<!\\\\)(?:(\\[{2})([\\p{Alpha}:_][\\p{Word}:.-]*)(?:,\\p{Blank}*(\\S.*?))?(\\]{2}))",
          "captures": {
            "1": {
              "name": "support.constant.asciidoc"
            },
            "2": {
              "name": "markup.blockid.asciidoc"
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            },
            "4": {
              "name": "support.constant.asciidoc"
            }
          }
        },
        {
          "name": "markup.other.anchor.asciidoc",
          "match": "(?<!\\\\)(anchor):(\\S+)\\[(.*?[^\\\\])?\\]",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.blockid.asciidoc"
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            }
          }
        }
      ]
    },
    "attribute-reference": {
      "patterns": [
        {
          "name": "markup.substitution.attribute-reference.asciidoc",
          "match": "(?<!\\\\)(\\{)(set|counter2?)(:)([\\p{Alnum}\\-_!]+)((:)(.*?))?(?<!\\\\)(\\})",
          "captures": {
            "2": {
              "name": "entity.name.function.asciidoc"
            },
            "3": {
              "name": "punctuation.separator.asciidoc"
            },
            "4": {
              "name": "support.constant.attribute-name.asciidoc"
            },
            "6": {
              "name": "punctuation.separator.asciidoc"
            },
            "7": {
              "name": "string.unquoted.attribute-value.asciidoc"
            }
          }
        },
        {
          "name": "markup.substitution.attribute-reference.asciidoc",
          "match": "(?<!\\\\)(\\{)(\\w+(?:[\\-]\\w+)*)(?<!\\\\)(\\})"
        }
      ]
    },
    "bibliography-anchor": {
      "patterns": [
        {
          "name": "bibliography-anchor.asciidoc",
          "match": "(?<!\\\\)(\\[{3})([\\p{Word}:][\\p{Word}:.-]*?)(\\]{3})",
          "captures": {
            "1": {
              "name": "support.constant.asciidoc"
            },
            "2": {
              "name": "markup.biblioref.asciidoc"
            },
            "3": {
              "name": "support.constant.asciidoc"
            }
          }
        }
      ]
    },
    "characters": {
      "patterns": [
        {
          "name": "markup.character-reference.asciidoc",
          "match": "(?<!\\\\)(&)(\\S+?)(;)",
          "captures": {
            "1": {
              "name": "constant.character.asciidoc"
            },
            "3": {
              "name": "constant.character.asciidoc"
            }
          }
        }
      ]
    },
    "emphasis": {
      "patterns": [
        {
          "name": "markup.emphasis.unconstrained.asciidoc",
          "match": "(?<!\\\\\\\\)(\\[(?:[^\\]]+?)\\])?((__)((?!_).+?)(__))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.italic.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.emphasis.constrained.asciidoc",
          "match": "(?!_{4,}\\s*$)(?<=^|[^\\p{Word};:])(\\[(?:[^\\]]+?)\\])?((_)(\\S|\\S.*?\\S)(_))(?!\\p{Word})",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.italic.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "footnote-macro": {
      "patterns": [
        {
          "name": "markup.other.footnote.asciidoc",
          "begin": "(?<!\\\\)footnote(?:(ref):|:([\\w-]+)?)\\[(?:|(.*?[^\\\\]))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "support.constant.attribute-name.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "patterns": [
            {
              "include": "#inlines"
            }
          ],
          "end": "\\]|^$"
        }
      ]
    },
    "general-block-macro": {
      "patterns": [
        {
          "name": "markup.macro.block.general.asciidoc",
          "match": "^(\\p{Word}+)(::)(\\S*?)(\\[)((?:\\\\\\]|[^\\]])*?)(\\])$",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "punctuation.separator.asciidoc"
            },
            "3": {
              "name": "markup.link.asciidoc",
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "4": {
              "name": "punctuation.separator.asciidoc"
            },
            "5": {
              "name": "string.unquoted.asciidoc",
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "6": {
              "name": "punctuation.separator.asciidoc"
            }
          }
        }
      ]
    },
    "image-macro": {
      "patterns": [
        {
          "name": "markup.macro.image.asciidoc",
          "match": "(?<!\\\\)(image|icon):([^:\\[][^\\[]*)\\[((?:\\\\\\]|[^\\]])*?)\\]",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.link.asciidoc"
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            }
          }
        }
      ]
    },
    "kbd-macro": {
      "patterns": [
        {
          "name": "markup.macro.kbd.asciidoc",
          "match": "(?<!\\\\)(kbd|btn):(\\[)((?:\\\\\\]|[^\\]])+?)(\\])",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            }
          }
        }
      ]
    },
    "link-macro": {
      "patterns": [
        {
          "name": "markup.other.url.asciidoc",
          "match": "(?:^|<|[\\s>\\(\\)\\[\\];])((?<!\\\\)(?:https?|file|ftp|irc)://[^\\s\\[\\]<]*[^\\s.,\\[\\]<\\)])(?:\\[((?:\\\\\\]|[^\\]])*?)\\])?",
          "captures": {
            "1": {
              "name": "markup.link.asciidoc",
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "2": {
              "name": "string.unquoted.asciidoc"
            }
          }
        },
        {
          "name": "markup.other.url.asciidoc",
          "match": "(?:^|<|[\\p{Blank}>\\(\\)\\[\\];])((?<!\\\\)\\{uri-\\w+(?:[\\-]\\w+)*(?<!\\\\)\\})(?:\\[((?:\\\\\\]|[^\\]])*?)\\])",
          "captures": {
            "1": {
              "name": "markup.substitution.attribute-reference.asciidoc"
            },
            "2": {
              "name": "string.unquoted.asciidoc"
            }
          }
        },
        {
          "name": "markup.other.url.asciidoc",
          "match": "(?<!\\\\)(link|mailto):([^\\s\\[]+)(?:\\[((?:\\\\\\]|[^\\]])*?)\\])",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.link.asciidoc",
              "patterns": [
                {
                  "include": "#attribute-reference"
                }
              ]
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            }
          }
        },
        {
          "name": "markup.link.email.asciidoc",
          "match": "\\p{Word}[\\p{Word}.%+-]*(@)\\p{Alnum}[\\p{Alnum}.-]*(\\.)\\p{Alpha}{2,4}\\b"
        }
      ]
    },
    "mark": {
      "patterns": [
        {
          "name": "markup.mark.unconstrained.asciidoc",
          "match": "(?<!\\\\\\\\)(\\[[^\\]]+?\\])((##)(.+?)(##))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.mark.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.mark.unconstrained.asciidoc",
          "match": "(?<!\\\\\\\\)((##)(.+?)(##))",
          "captures": {
            "1": {
              "name": "markup.highlight.asciidoc"
            },
            "2": {
              "name": "punctuation.definition.asciidoc"
            },
            "4": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.mark.constrained.asciidoc",
          "match": "(?<![\\\\;:\\p{Word}#])(\\[[^\\]]+?\\])((#)(\\S|\\S.*?\\S)(#)(?!\\p{Word}))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.mark.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.mark.constrained.asciidoc",
          "match": "(?<![\\\\;:\\p{Word}#])(\\[[^\\]]+?\\])?((#)(\\S|\\S.*?\\S)(#)(?!\\p{Word}))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.highlight.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "menu-macro": {
      "patterns": [
        {
          "name": "markup.other.menu.asciidoc",
          "match": "(?<!\\\\)(menu):(\\p{Word}|\\p{Word}.*?\\S)\\[\\p{Blank}*(.+?)?\\]",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.link.asciidoc"
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            }
          }
        }
      ]
    },
    "monospace": {
      "patterns": [
        {
          "name": "markup.monospace.unconstrained.asciidoc",
          "match": "(?<!\\\\)(\\[.+?\\])?((``)(.+?)(``))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.raw.monospace.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.monospace.constrained.asciidoc",
          "match": "(?<![\\\\;:\\p{Word}\"'`])(\\[.+?\\])?((`)(\\S|\\S.*?\\S)(`))(?![\\p{Word}\"'`])",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.raw.monospace.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "passthrough-macro": {
      "patterns": [
        {
          "name": "markup.macro.inline.passthrough.asciidoc",
          "match": "(?:(?<!\\\\)(\\[([^\\]]+?)\\]))?(?:\\\\{0,2})(?<delim>\\+{2,3}|\\${2})(.*?)(\\k<delim>)",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "3": {
              "name": "support.constant.asciidoc"
            },
            "4": {
              "name": "string.unquoted.asciidoc",
              "patterns": [
                {
                  "include": "text.html.basic"
                }
              ]
            },
            "5": {
              "name": "support.constant.asciidoc"
            }
          }
        },
        {
          "name": "markup.macro.inline.passthrough.asciidoc",
          "begin": "(?<!\\\\)(pass:)([a-z,]*)(\\[)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.meta.attribute-list.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "patterns": [
            {
              "include": "text.html.basic"
            }
          ],
          "end": "\\]|^$"
        }
      ]
    },
    "stem-macro": {
      "patterns": [
        {
          "name": "markup.macro.inline.stem.asciidoc",
          "begin": "(?<!\\\\)(stem|(?:latex|ascii)math):([a-z,]*)(\\[)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.meta.attribute-list.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "end": "\\]|^$"
        }
      ]
    },
    "bibtex-macro": {
      "patterns": [
        {
          "name": "markup.macro.inline.bibtex.asciidoc",
          "begin": "(?<!\\\\)(citenp:)([a-z,]*)(\\[)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.meta.attribute-list.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "end": "\\]|^$"
        }
      ]
    },
    "strong": {
      "patterns": [
        {
          "name": "markup.strong.unconstrained.asciidoc",
          "match": "(?<!\\\\\\\\)(\\[.+?\\])?((\\*\\*)(.+?)(\\*\\*))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.bold.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.strong.constrained.asciidoc",
          "match": "(?<![\\\\;:\\p{Word}\\*])(\\[.+?\\])?((\\*)(\\S|\\S.*?\\S)(\\*)(?!\\p{Word}))",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.bold.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "subscript": {
      "patterns": [
        {
          "name": "markup.subscript.asciidoc",
          "match": "(?<!\\\\)(\\[.+?\\])?((~)(\\S+?)(~))",
          "captures": {
            "1": {
              "name": "markup.meta.sub.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.sub.subscript.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "superscript": {
      "patterns": [
        {
          "name": "markup.superscript.asciidoc",
          "match": "(?<!\\\\)(\\[.+?\\])?((\\^)(\\S+?)(\\^))",
          "captures": {
            "1": {
              "name": "markup.meta.super.attribute-list.asciidoc"
            },
            "2": {
              "name": "markup.super.superscript.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "typographic-quotes": {
      "patterns": [
        {
          "name": "markup.italic.quote.typographic-quotes.asciidoc",
          "comment": "double-quoted",
          "match": "(?:^|(?<!\\p{Word}|;|:))(\\[([^\\]]+?)\\])?(\"`)(\\S|\\S.*?\\S)(`\")(?!\\p{Word})",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        },
        {
          "name": "markup.italic.quote.typographic-quotes.asciidoc",
          "comment": "single-quoted",
          "match": "(?:^|(?<!\\p{Word}|;|:))(\\[([^\\]]+?)\\])?('`)(\\S|\\S.*?\\S)(`')(?!\\p{Word})",
          "captures": {
            "1": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "3": {
              "name": "punctuation.definition.asciidoc"
            },
            "5": {
              "name": "punctuation.definition.asciidoc"
            }
          }
        }
      ]
    },
    "xref-macro": {
      "patterns": [
        {
          "name": "markup.reference.xref.asciidoc",
          "match": "(?<!\\\\)(?:(<<)([\\p{Word}\":./]+,)?(.*?)(>>))",
          "captures": {
            "1": {
              "name": "constant.asciidoc"
            },
            "2": {
              "name": "markup.meta.attribute-list.asciidoc"
            },
            "3": {
              "name": "string.unquoted.asciidoc"
            },
            "4": {
              "name": "constant.asciidoc"
            }
          }
        },
        {
          "name": "markup.reference.xref.asciidoc",
          "begin": "(?<!\\\\)(xref:)([\\p{Word}\":.\\/].*?)(\\[)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            },
            "2": {
              "name": "markup.meta.attribute-list.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "end": "\\]|^$"
        }
      ]
    },
    "admonition-paragraph": {
      "patterns": [
        {
          "name": "markup.admonition.asciidoc",
          "begin": "(?=(?>(?:^\\[(NOTE|TIP|IMPORTANT|WARNING|CAUTION)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(NOTE|TIP|IMPORTANT|WARNING|CAUTION)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "example block",
              "begin": "^(={4,})\\s*$",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#list"
                }
              ],
              "end": "(?<=\\1)"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})\\s*$",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#list"
                }
              ],
              "end": "(?<=\\1)"
            }
          ],
          "end": "((?<=--|====)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.admonition.asciidoc",
          "begin": "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION)\\:\\p{Blank}+",
          "captures": {
            "1": {
              "name": "entity.name.function.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "#inlines"
            }
          ],
          "end": "^\\p{Blank}*$"
        }
      ]
    },
    "comment-paragraph": {
      "patterns": [
        {
          "name": "comment.block.asciidoc",
          "begin": "(?=(?>(?:^\\[(comment)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(comment)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})\\s*$",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#list"
                }
              ],
              "end": "^(\\1)$"
            },
            {
              "include": "#inlines"
            }
          ],
          "end": "((?<=--)$|^\\p{Blank}*$)"
        }
      ]
    },
    "example-paragraph": {
      "patterns": [
        {
          "name": "markup.block.example.asciidoc",
          "begin": "(?=(?>(?:^\\[(example)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(example)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "example block",
              "begin": "^(={4,})$",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "end": "^(\\1)$"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})$",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "end": "^(\\1)$"
            },
            {
              "include": "#inlines"
            }
          ],
          "end": "((?<=--|====)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.block.example.asciidoc",
          "begin": "^(={4,})$",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "end": "^(\\1)$"
        }
      ]
    },
    "front-matter-block": {
      "patterns": [
        {
          "name": "markup.block.front-matter.asciidoc",
          "begin": "\\A(-{3}$)",
          "patterns": [
            {
              "include": "source.yaml"
            }
          ],
          "end": "^(\\1)$"
        }
      ]
    },
    "listing-paragraph": {
      "patterns": [
        {
          "name": "markup.block.listing.asciidoc",
          "begin": "(?=(?>(?:^\\[(listing)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(listing)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "^(-{4,})\\s*$",
              "end": "^(\\1)$"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})\\s*$",
              "end": "^(\\1)$"
            },
            {
              "include": "#inlines"
            }
          ],
          "end": "((?<=--)$|^\\p{Blank}*$)"
        }
      ]
    },
    "literal-paragraph": {
      "patterns": [
        {
          "name": "markup.block.literal.asciidoc",
          "begin": "(?=(?>(?:^\\[(literal)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(literal)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "literal block",
              "begin": "^(\\.{4,})$",
              "end": "^(\\1)$"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})\\s*$",
              "end": "^(\\1)$"
            },
            {
              "include": "#inlines"
            }
          ],
          "end": "((?<=--|\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.block.literal.asciidoc",
          "begin": "^(\\.{4,})$",
          "end": "^(\\1)$"
        }
      ]
    },
    "open-block": {
      "patterns": [
        {
          "name": "markup.block.open.asciidoc",
          "begin": "^(-{2})$",
          "beginCaptures": {
            "1": {
              "name": "constant.other.symbol.asciidoc"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "end": "^(\\1)$",
          "endCaptures": {
            "1": {
              "name": "constant.other.symbol.asciidoc"
            }
          }
        }
      ]
    },
    "passthrough-paragraph": {
      "patterns": [
        {
          "name": "markup.block.passthrough.asciidoc",
          "begin": "(?=(?>(?:^\\[(pass)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(pass)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "passthrough block",
              "begin": "^(\\+{4,})\\s*$",
              "patterns": [
                {
                  "include": "text.html.basic"
                }
              ],
              "end": "(?<=\\1)"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})\\s*$",
              "patterns": [
                {
                  "include": "text.html.basic"
                }
              ],
              "end": "(?<=\\1)"
            }
          ],
          "end": "((?<=--|\\+\\+)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.block.passthrough.asciidoc",
          "begin": "(^\\+{4,}$)",
          "patterns": [
            {
              "include": "text.html.basic"
            }
          ],
          "end": "\\1"
        }
      ]
    },
    "quote-paragraph": {
      "patterns": [
        {
          "name": "markup.italic.quotes.asciidoc",
          "begin": "(?=(?>(?:^\\[(quote|verse)((?:,|#|\\.|%)([^,\\]]+))*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(quote|verse)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "include": "#inlines"
            },
            {
              "comment": "quotes block",
              "begin": "^([_]{4,})\\s*$",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#list"
                }
              ],
              "end": "(?<=\\1)"
            },
            {
              "comment": "air quotes",
              "begin": "^(\"{2})\\s*$",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#list"
                }
              ],
              "end": "(?<=\\1)"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})\\s*$",
              "patterns": [
                {
                  "include": "#inlines"
                },
                {
                  "include": "#list"
                }
              ],
              "end": "(?<=\\1)$"
            }
          ],
          "end": "((?<=____|\"\"|--)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.italic.quotes.asciidoc",
          "begin": "^(\"\")$",
          "patterns": [
            {
              "include": "#inlines"
            },
            {
              "include": "#list"
            }
          ],
          "end": "^\\1$"
        },
        {
          "name": "markup.italic.quotes.asciidoc",
          "begin": "^\\p{Blank}*(>) ",
          "patterns": [
            {
              "include": "#inlines"
            },
            {
              "include": "#list"
            }
          ],
          "end": "^\\p{Blank}*?$"
        }
      ]
    },
    "sidebar-paragraph": {
      "patterns": [
        {
          "name": "markup.block.sidebar.asciidoc",
          "begin": "(?=(?>(?:^\\[(sidebar)((?:,|#|\\.|%)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(sidebar)((?:,|#|\\.|%)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "sidebar block",
              "begin": "^(\\*{4,})$",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "end": "^(\\1)$"
            },
            {
              "comment": "open block",
              "begin": "^(-{2})$",
              "patterns": [
                {
                  "include": "$self"
                }
              ],
              "end": "^(\\1)$"
            },
            {
              "include": "#inlines"
            }
          ],
          "end": "((?<=--|\\*\\*\\*\\*)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.block.sidebar.asciidoc",
          "begin": "^(\\*{4,})$",
          "patterns": [
            {
              "include": "$self"
            }
          ],
          "end": "^(\\1)$"
        }
      ]
    },
    "table-csv": {
      "patterns": [
        {
          "name": "markup.table.csv.asciidoc",
          "begin": "^(,===)$",
          "beginCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "patterns": [
            {
              "include": "text.csv"
            },
            {
              "comment": "cell separator",
              "match": ",",
              "captures": {
                "0": {
                  "name": "markup.table.cell.delimiter.asciidoc"
                }
              }
            },
            {
              "include": "#general-block-macro"
            }
          ],
          "end": "^(\\1)$",
          "endCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          }
        }
      ]
    },
    "table-dsv": {
      "patterns": [
        {
          "name": "markup.table.dsv.asciidoc",
          "begin": "^(:===)$",
          "beginCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          },
          "contentName": "string.unquoted.asciidoc",
          "patterns": [
            {
              "comment": "cell separator",
              "match": ":",
              "captures": {
                "0": {
                  "name": "markup.table.cell.delimiter.asciidoc"
                }
              }
            },
            {
              "include": "#general-block-macro"
            }
          ],
          "end": "^(\\1)$",
          "endCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          }
        }
      ]
    },
    "table-nested": {
      "patterns": [
        {
          "name": "markup.table.nested.asciidoc",
          "begin": "^(!===)$",
          "beginCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          },
          "contentName": "markup.table.content.asciidoc",
          "patterns": [
            {
              "comment": "cell separator and attributes",
              "match": "(^|[^\\p{Blank}\\\\]*)(?<!\\\\)(!)",
              "captures": {
                "1": {
                  "name": "markup.meta.attribute-list.asciidoc"
                },
                "2": {
                  "name": "markup.table.cell.delimiter.asciidoc"
                }
              }
            },
            {
              "include": "#tables-includes"
            }
          ],
          "end": "^(\\1)$",
          "endCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          }
        }
      ]
    },
    "table-psv": {
      "patterns": [
        {
          "name": "markup.table.asciidoc",
          "begin": "^(\\|===)\\s*$",
          "beginCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          },
          "contentName": "markup.table.content.asciidoc",
          "patterns": [
            {
              "comment": "cell separator and attributes",
              "match": "(^|[^\\p{Blank}\\\\]*)(?<!\\\\)(\\|)",
              "captures": {
                "1": {
                  "name": "markup.meta.attribute-list.asciidoc"
                },
                "2": {
                  "name": "markup.table.cell.delimiter.asciidoc"
                }
              }
            },
            {
              "include": "#tables-includes"
            }
          ],
          "end": "^(\\1)\\s*$",
          "endCaptures": {
            "0": {
              "name": "markup.table.delimiter.asciidoc"
            }
          }
        }
      ]
    },
    "source-asciidoctor": {
      "patterns": [
        {
          "name": "markup.code.css.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(css|css.erb))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(css|css.erb))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.css",
                  "patterns": [
                    {
                      "include": "source.css"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.css",
                  "patterns": [
                    {
                      "include": "source.css"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.css",
                  "patterns": [
                    {
                      "include": "source.css"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.basic.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(html|htm|shtml|xhtml|inc|tmpl|tpl))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(html|htm|shtml|xhtml|inc|tmpl|tpl))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.html",
                  "patterns": [
                    {
                      "include": "text.html.basic"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.html",
                  "patterns": [
                    {
                      "include": "text.html.basic"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.html",
                  "patterns": [
                    {
                      "include": "text.html.basic"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.ini.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(ini|conf))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(ini|conf))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.ini",
                  "patterns": [
                    {
                      "include": "source.ini"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.ini",
                  "patterns": [
                    {
                      "include": "source.ini"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.ini",
                  "patterns": [
                    {
                      "include": "source.ini"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.java.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(java|bsh))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(java|bsh))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.java",
                  "patterns": [
                    {
                      "include": "source.java"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.java",
                  "patterns": [
                    {
                      "include": "source.java"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.java",
                  "patterns": [
                    {
                      "include": "source.java"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.lua.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(lua))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(lua))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.lua",
                  "patterns": [
                    {
                      "include": "source.lua"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.lua",
                  "patterns": [
                    {
                      "include": "source.lua"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.lua",
                  "patterns": [
                    {
                      "include": "source.lua"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.makefile.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(Makefile|makefile|GNUmakefile|OCamlMakefile))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(Makefile|makefile|GNUmakefile|OCamlMakefile))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.makefile",
                  "patterns": [
                    {
                      "include": "source.makefile"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.makefile",
                  "patterns": [
                    {
                      "include": "source.makefile"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.makefile",
                  "patterns": [
                    {
                      "include": "source.makefile"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.perl.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(perl|pl|pm|pod|t|PL|psgi|vcl))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(perl|pl|pm|pod|t|PL|psgi|vcl))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.perl",
                  "patterns": [
                    {
                      "include": "source.perl"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.perl",
                  "patterns": [
                    {
                      "include": "source.perl"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.perl",
                  "patterns": [
                    {
                      "include": "source.perl"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.r.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(R|r|s|S|Rprofile|\\{\\.r.+?\\}))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(R|r|s|S|Rprofile|\\{\\.r.+?\\}))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.r",
                  "patterns": [
                    {
                      "include": "source.r"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.r",
                  "patterns": [
                    {
                      "include": "source.r"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.r",
                  "patterns": [
                    {
                      "include": "source.r"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.ruby.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(ruby|rb|rbx|rjs|Rakefile|rake|cgi|fcgi|gemspec|irbrc|Capfile|ru|prawn|Cheffile|Gemfile|Guardfile|Hobofile|Vagrantfile|Appraisals|Rantfile|Berksfile|Berksfile.lock|Thorfile|Puppetfile))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(ruby|rb|rbx|rjs|Rakefile|rake|cgi|fcgi|gemspec|irbrc|Capfile|ru|prawn|Cheffile|Gemfile|Guardfile|Hobofile|Vagrantfile|Appraisals|Rantfile|Berksfile|Berksfile.lock|Thorfile|Puppetfile))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.ruby",
                  "patterns": [
                    {
                      "include": "source.ruby"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.ruby",
                  "patterns": [
                    {
                      "include": "source.ruby"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.ruby",
                  "patterns": [
                    {
                      "include": "source.ruby"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.php.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(php|php3|php4|php5|phpt|phtml|aw|ctp))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(php|php3|php4|php5|phpt|phtml|aw|ctp))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.php",
                  "patterns": [
                    {
                      "include": "text.html.basic"
                    },
                    {
                      "include": "source.php"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.php",
                  "patterns": [
                    {
                      "include": "text.html.basic"
                    },
                    {
                      "include": "source.php"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.php",
                  "patterns": [
                    {
                      "include": "text.html.basic"
                    },
                    {
                      "include": "source.php"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.sql.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(sql|ddl|dml))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(sql|ddl|dml))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.sql",
                  "patterns": [
                    {
                      "include": "source.sql"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.sql",
                  "patterns": [
                    {
                      "include": "source.sql"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.sql",
                  "patterns": [
                    {
                      "include": "source.sql"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.vs_net.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(vb))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(vb))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.vs_net",
                  "patterns": [
                    {
                      "include": "source.asp.vb.net"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.vs_net",
                  "patterns": [
                    {
                      "include": "source.asp.vb.net"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.vs_net",
                  "patterns": [
                    {
                      "include": "source.asp.vb.net"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.xml.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(xml|xsd|tld|jsp|pt|cpt|dtml|rss|opml))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(xml|xsd|tld|jsp|pt|cpt|dtml|rss|opml))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.xml",
                  "patterns": [
                    {
                      "include": "text.xml"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.xml",
                  "patterns": [
                    {
                      "include": "text.xml"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.xml",
                  "patterns": [
                    {
                      "include": "text.xml"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.xsl.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(xsl|xslt))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(xsl|xslt))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.xsl",
                  "patterns": [
                    {
                      "include": "text.xml.xsl"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.xsl",
                  "patterns": [
                    {
                      "include": "text.xml.xsl"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.xsl",
                  "patterns": [
                    {
                      "include": "text.xml.xsl"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.yaml.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(yaml|yml))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(yaml|yml))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.yaml",
                  "patterns": [
                    {
                      "include": "source.yaml"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.yaml",
                  "patterns": [
                    {
                      "include": "source.yaml"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.yaml",
                  "patterns": [
                    {
                      "include": "source.yaml"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.dosbatch.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(bat|batch))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(bat|batch))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.dosbatch",
                  "patterns": [
                    {
                      "include": "source.batchfile"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.dosbatch",
                  "patterns": [
                    {
                      "include": "source.batchfile"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.dosbatch",
                  "patterns": [
                    {
                      "include": "source.batchfile"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.clojure.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(clj|cljs|clojure))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(clj|cljs|clojure))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.clojure",
                  "patterns": [
                    {
                      "include": "source.clojure"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.clojure",
                  "patterns": [
                    {
                      "include": "source.clojure"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.clojure",
                  "patterns": [
                    {
                      "include": "source.clojure"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.coffee.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(coffee|Cakefile|coffee.erb))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(coffee|Cakefile|coffee.erb))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.coffee",
                  "patterns": [
                    {
                      "include": "source.coffee"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.coffee",
                  "patterns": [
                    {
                      "include": "source.coffee"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.coffee",
                  "patterns": [
                    {
                      "include": "source.coffee"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.c.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(c|h))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(c|h))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.c",
                  "patterns": [
                    {
                      "include": "source.c"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.c",
                  "patterns": [
                    {
                      "include": "source.c"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.c",
                  "patterns": [
                    {
                      "include": "source.c"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.cpp.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(cpp|c\\+\\+|cxx))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(cpp|c\\+\\+|cxx))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.cpp source.cpp",
                  "patterns": [
                    {
                      "include": "source.cpp"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.cpp source.cpp",
                  "patterns": [
                    {
                      "include": "source.cpp"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.cpp source.cpp",
                  "patterns": [
                    {
                      "include": "source.cpp"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.diff.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(patch|diff|rej))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(patch|diff|rej))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.diff",
                  "patterns": [
                    {
                      "include": "source.diff"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.diff",
                  "patterns": [
                    {
                      "include": "source.diff"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.diff",
                  "patterns": [
                    {
                      "include": "source.diff"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.dockerfile.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(dockerfile|Dockerfile))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(dockerfile|Dockerfile))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.dockerfile",
                  "patterns": [
                    {
                      "include": "source.dockerfile"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.dockerfile",
                  "patterns": [
                    {
                      "include": "source.dockerfile"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.dockerfile",
                  "patterns": [
                    {
                      "include": "source.dockerfile"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.git_commit.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(COMMIT_EDITMSG|MERGE_MSG))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(COMMIT_EDITMSG|MERGE_MSG))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.git_commit",
                  "patterns": [
                    {
                      "include": "text.git-commit"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.git_commit",
                  "patterns": [
                    {
                      "include": "text.git-commit"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.git_commit",
                  "patterns": [
                    {
                      "include": "text.git-commit"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.git_rebase.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(git-rebase-todo))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(git-rebase-todo))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.git_rebase",
                  "patterns": [
                    {
                      "include": "text.git-rebase"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.git_rebase",
                  "patterns": [
                    {
                      "include": "text.git-rebase"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.git_rebase",
                  "patterns": [
                    {
                      "include": "text.git-rebase"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.go.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(go|golang))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(go|golang))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.go",
                  "patterns": [
                    {
                      "include": "source.go"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.go",
                  "patterns": [
                    {
                      "include": "source.go"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.go",
                  "patterns": [
                    {
                      "include": "source.go"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.groovy.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(groovy|gvy))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(groovy|gvy))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.groovy",
                  "patterns": [
                    {
                      "include": "source.groovy"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.groovy",
                  "patterns": [
                    {
                      "include": "source.groovy"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.groovy",
                  "patterns": [
                    {
                      "include": "source.groovy"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.pug.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(jade|pug))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(jade|pug))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.pug",
                  "patterns": [
                    {
                      "include": "text.pug"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.pug",
                  "patterns": [
                    {
                      "include": "text.pug"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.pug",
                  "patterns": [
                    {
                      "include": "text.pug"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.js.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(js|jsx|javascript|es6|mjs|cjs|dataviewjs|\\{\\.js.+?\\}))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(js|jsx|javascript|es6|mjs|cjs|dataviewjs|\\{\\.js.+?\\}))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.javascript",
                  "patterns": [
                    {
                      "include": "source.js"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.javascript",
                  "patterns": [
                    {
                      "include": "source.js"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.javascript",
                  "patterns": [
                    {
                      "include": "source.js"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.js_regexp.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(regexp))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(regexp))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.js_regexp",
                  "patterns": [
                    {
                      "include": "source.js.regexp"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.js_regexp",
                  "patterns": [
                    {
                      "include": "source.js.regexp"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.js_regexp",
                  "patterns": [
                    {
                      "include": "source.js.regexp"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.json.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(json|json5|sublime-settings|sublime-menu|sublime-keymap|sublime-mousemap|sublime-theme|sublime-build|sublime-project|sublime-completions))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(json|json5|sublime-settings|sublime-menu|sublime-keymap|sublime-mousemap|sublime-theme|sublime-build|sublime-project|sublime-completions))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.json",
                  "patterns": [
                    {
                      "include": "source.json"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.json",
                  "patterns": [
                    {
                      "include": "source.json"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.json",
                  "patterns": [
                    {
                      "include": "source.json"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.jsonc.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(jsonc))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(jsonc))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.jsonc",
                  "patterns": [
                    {
                      "include": "source.json.comments"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.jsonc",
                  "patterns": [
                    {
                      "include": "source.json.comments"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.jsonc",
                  "patterns": [
                    {
                      "include": "source.json.comments"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.less.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(less))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(less))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.less",
                  "patterns": [
                    {
                      "include": "source.css.less"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.less",
                  "patterns": [
                    {
                      "include": "source.css.less"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.less",
                  "patterns": [
                    {
                      "include": "source.css.less"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.objc.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(objectivec|objective-c|mm|objc|obj-c|m|h))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(objectivec|objective-c|mm|objc|obj-c|m|h))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.objc",
                  "patterns": [
                    {
                      "include": "source.objc"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.objc",
                  "patterns": [
                    {
                      "include": "source.objc"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.objc",
                  "patterns": [
                    {
                      "include": "source.objc"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.swift.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(swift))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(swift))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.swift",
                  "patterns": [
                    {
                      "include": "source.swift"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.swift",
                  "patterns": [
                    {
                      "include": "source.swift"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.swift",
                  "patterns": [
                    {
                      "include": "source.swift"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.scss.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(scss))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(scss))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.scss",
                  "patterns": [
                    {
                      "include": "source.css.scss"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.scss",
                  "patterns": [
                    {
                      "include": "source.css.scss"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.scss",
                  "patterns": [
                    {
                      "include": "source.css.scss"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.perl6.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(perl6|p6|pl6|pm6|nqp))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(perl6|p6|pl6|pm6|nqp))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.perl6",
                  "patterns": [
                    {
                      "include": "source.perl.6"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.perl6",
                  "patterns": [
                    {
                      "include": "source.perl.6"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.perl6",
                  "patterns": [
                    {
                      "include": "source.perl.6"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.powershell.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(powershell|ps1|psm1|psd1|pwsh))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(powershell|ps1|psm1|psd1|pwsh))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.powershell",
                  "patterns": [
                    {
                      "include": "source.powershell"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.powershell",
                  "patterns": [
                    {
                      "include": "source.powershell"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.powershell",
                  "patterns": [
                    {
                      "include": "source.powershell"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.python.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(python|py|py3|rpy|pyw|cpy|SConstruct|Sconstruct|sconstruct|SConscript|gyp|gypi|\\{\\.python.+?\\}))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(python|py|py3|rpy|pyw|cpy|SConstruct|Sconstruct|sconstruct|SConscript|gyp|gypi|\\{\\.python.+?\\}))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.python",
                  "patterns": [
                    {
                      "include": "source.python"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.python",
                  "patterns": [
                    {
                      "include": "source.python"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.python",
                  "patterns": [
                    {
                      "include": "source.python"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.julia.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(julia|\\{\\.julia.+?\\}))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(julia|\\{\\.julia.+?\\}))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.julia",
                  "patterns": [
                    {
                      "include": "source.julia"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.julia",
                  "patterns": [
                    {
                      "include": "source.julia"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.julia",
                  "patterns": [
                    {
                      "include": "source.julia"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.regexp_python.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(re))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(re))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.regexp_python",
                  "patterns": [
                    {
                      "include": "source.regexp.python"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.regexp_python",
                  "patterns": [
                    {
                      "include": "source.regexp.python"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.regexp_python",
                  "patterns": [
                    {
                      "include": "source.regexp.python"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.rust.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(rust|rs|\\{\\.rust.+?\\}))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(rust|rs|\\{\\.rust.+?\\}))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.rust",
                  "patterns": [
                    {
                      "include": "source.rust"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.rust",
                  "patterns": [
                    {
                      "include": "source.rust"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.rust",
                  "patterns": [
                    {
                      "include": "source.rust"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.scala.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(scala|sbt))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(scala|sbt))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.scala",
                  "patterns": [
                    {
                      "include": "source.scala"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.scala",
                  "patterns": [
                    {
                      "include": "source.scala"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.scala",
                  "patterns": [
                    {
                      "include": "source.scala"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.shell.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(shell|sh|bash|zsh|bashrc|bash_profile|bash_login|profile|bash_logout|.textmate_init|\\{\\.bash.+?\\}))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(shell|sh|bash|zsh|bashrc|bash_profile|bash_login|profile|bash_logout|.textmate_init|\\{\\.bash.+?\\}))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.shellscript",
                  "patterns": [
                    {
                      "include": "source.shell"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.shellscript",
                  "patterns": [
                    {
                      "include": "source.shell"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.shellscript",
                  "patterns": [
                    {
                      "include": "source.shell"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.ts.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(typescript|ts))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(typescript|ts))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.typescript",
                  "patterns": [
                    {
                      "include": "source.ts"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.typescript",
                  "patterns": [
                    {
                      "include": "source.ts"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.typescript",
                  "patterns": [
                    {
                      "include": "source.ts"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.tsx.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(tsx))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(tsx))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.typescriptreact",
                  "patterns": [
                    {
                      "include": "source.tsx"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.typescriptreact",
                  "patterns": [
                    {
                      "include": "source.tsx"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.typescriptreact",
                  "patterns": [
                    {
                      "include": "source.tsx"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.csharp.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(cs|csharp|c#))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(cs|csharp|c#))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.csharp",
                  "patterns": [
                    {
                      "include": "source.cs"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.csharp",
                  "patterns": [
                    {
                      "include": "source.cs"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.csharp",
                  "patterns": [
                    {
                      "include": "source.cs"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.fsharp.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(fs|fsharp|f#))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(fs|fsharp|f#))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.fsharp",
                  "patterns": [
                    {
                      "include": "source.fsharp"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.fsharp",
                  "patterns": [
                    {
                      "include": "source.fsharp"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.fsharp",
                  "patterns": [
                    {
                      "include": "source.fsharp"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.dart.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(dart))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(dart))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.dart",
                  "patterns": [
                    {
                      "include": "source.dart"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.dart",
                  "patterns": [
                    {
                      "include": "source.dart"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.dart",
                  "patterns": [
                    {
                      "include": "source.dart"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.handlebars.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(handlebars|hbs))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(handlebars|hbs))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.handlebars",
                  "patterns": [
                    {
                      "include": "text.html.handlebars"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.handlebars",
                  "patterns": [
                    {
                      "include": "text.html.handlebars"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.handlebars",
                  "patterns": [
                    {
                      "include": "text.html.handlebars"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.markdown.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(markdown|md))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(markdown|md))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.markdown",
                  "patterns": [
                    {
                      "include": "text.html.markdown"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.markdown",
                  "patterns": [
                    {
                      "include": "text.html.markdown"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.markdown",
                  "patterns": [
                    {
                      "include": "text.html.markdown"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.log.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(log))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(log))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.log",
                  "patterns": [
                    {
                      "include": "text.log"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.log",
                  "patterns": [
                    {
                      "include": "text.log"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.log",
                  "patterns": [
                    {
                      "include": "text.log"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.erlang.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(erlang))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(erlang))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.erlang",
                  "patterns": [
                    {
                      "include": "source.erlang"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.erlang",
                  "patterns": [
                    {
                      "include": "source.erlang"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.erlang",
                  "patterns": [
                    {
                      "include": "source.erlang"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.elixir.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(elixir))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(elixir))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.elixir",
                  "patterns": [
                    {
                      "include": "source.elixir"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.elixir",
                  "patterns": [
                    {
                      "include": "source.elixir"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.elixir",
                  "patterns": [
                    {
                      "include": "source.elixir"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.latex.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(latex|tex))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(latex|tex))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.latex",
                  "patterns": [
                    {
                      "include": "text.tex.latex"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.latex",
                  "patterns": [
                    {
                      "include": "text.tex.latex"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.latex",
                  "patterns": [
                    {
                      "include": "text.tex.latex"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.bibtex.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(bibtex))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(bibtex))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.bibtex",
                  "patterns": [
                    {
                      "include": "text.bibtex"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.bibtex",
                  "patterns": [
                    {
                      "include": "text.bibtex"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.bibtex",
                  "patterns": [
                    {
                      "include": "text.bibtex"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.twig.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(twig))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(twig))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.twig",
                  "patterns": [
                    {
                      "include": "source.twig"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.twig",
                  "patterns": [
                    {
                      "include": "source.twig"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.twig",
                  "patterns": [
                    {
                      "include": "source.twig"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.yang.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(yang))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(yang))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.yang",
                  "patterns": [
                    {
                      "include": "source.yang"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.yang",
                  "patterns": [
                    {
                      "include": "source.yang"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.yang",
                  "patterns": [
                    {
                      "include": "source.yang"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.abap.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(abap))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(abap))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.abap",
                  "patterns": [
                    {
                      "include": "source.abap"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.abap",
                  "patterns": [
                    {
                      "include": "source.abap"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.abap",
                  "patterns": [
                    {
                      "include": "source.abap"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.restructuredtext.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(restructuredtext|rst))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(restructuredtext|rst))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.restructuredtext",
                  "patterns": [
                    {
                      "include": "source.rst"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.restructuredtext",
                  "patterns": [
                    {
                      "include": "source.rst"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.restructuredtext",
                  "patterns": [
                    {
                      "include": "source.rst"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.haskell.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(haskell))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(haskell))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.haskell",
                  "patterns": [
                    {
                      "include": "source.haskell"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.haskell",
                  "patterns": [
                    {
                      "include": "source.haskell"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.haskell",
                  "patterns": [
                    {
                      "include": "source.haskell"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        },
        {
          "name": "markup.code.kotlin.asciidoc",
          "begin": "(?=(?>(?:^\\[(source)(?:,|#)\\p{Blank}*(?i:(kotlin|kt))((?:,|#)[^\\]]+)*\\]$)))",
          "patterns": [
            {
              "match": "^\\[(source)(?:,|#)\\p{Blank}*(?i:(kotlin|kt))((?:,|#)([^,\\]]+))*\\]$",
              "captures": {
                "0": {
                  "name": "markup.heading.asciidoc",
                  "patterns": [
                    {
                      "include": "#block-attribute-inner"
                    }
                  ]
                }
              }
            },
            {
              "include": "#inlines"
            },
            {
              "include": "#block-title"
            },
            {
              "comment": "listing block",
              "begin": "(^|\\G)(-{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{4,})\\s*$)",
                  "contentName": "meta.embedded.block.kotlin",
                  "patterns": [
                    {
                      "include": "source.kotlin"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "open block",
              "begin": "(^|\\G)(-{2})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(-{2})\\s*$)",
                  "contentName": "meta.embedded.block.kotlin",
                  "patterns": [
                    {
                      "include": "source.kotlin"
                    }
                  ]
                }
              ]
            },
            {
              "comment": "literal block",
              "begin": "(^|\\G)(\\.{4,})\\s*$",
              "end": "(^|\\G)(\\2)\\s*$",
              "patterns": [
                {
                  "include": "#block-callout"
                },
                {
                  "include": "#include-directive"
                },
                {
                  "begin": "(^|\\G)(\\s*)(.*)",
                  "while": "(^|\\G)(?!(\\.{4,})\\s*$)",
                  "contentName": "meta.embedded.block.kotlin",
                  "patterns": [
                    {
                      "include": "source.kotlin"
                    }
                  ]
                }
              ]
            }
          ],
          "end": "((?<=--|\\.\\.\\.\\.)$|^\\p{Blank}*$)"
        }
      ]
    },
    "source-markdown": {
      "patterns": [
        {
          "name": "markup.code.css.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(css|css.erb)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.css",
              "patterns": [
                {
                  "include": "source.css"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.basic.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(html|htm|shtml|xhtml|inc|tmpl|tpl)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.html",
              "patterns": [
                {
                  "include": "text.html.basic"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.ini.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(ini|conf)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.ini",
              "patterns": [
                {
                  "include": "source.ini"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.java.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(java|bsh)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.java",
              "patterns": [
                {
                  "include": "source.java"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.lua.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(lua)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.lua",
              "patterns": [
                {
                  "include": "source.lua"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.makefile.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(Makefile|makefile|GNUmakefile|OCamlMakefile)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.makefile",
              "patterns": [
                {
                  "include": "source.makefile"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.perl.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(perl|pl|pm|pod|t|PL|psgi|vcl)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.perl",
              "patterns": [
                {
                  "include": "source.perl"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.r.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(R|r|s|S|Rprofile|\\{\\.r.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.r",
              "patterns": [
                {
                  "include": "source.r"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.ruby.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(ruby|rb|rbx|rjs|Rakefile|rake|cgi|fcgi|gemspec|irbrc|Capfile|ru|prawn|Cheffile|Gemfile|Guardfile|Hobofile|Vagrantfile|Appraisals|Rantfile|Berksfile|Berksfile.lock|Thorfile|Puppetfile)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.ruby",
              "patterns": [
                {
                  "include": "source.ruby"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.php.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(php|php3|php4|php5|phpt|phtml|aw|ctp)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.php",
              "patterns": [
                {
                  "include": "text.html.basic"
                },
                {
                  "include": "source.php"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.sql.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(sql|ddl|dml)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.sql",
              "patterns": [
                {
                  "include": "source.sql"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.vs_net.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(vb)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.vs_net",
              "patterns": [
                {
                  "include": "source.asp.vb.net"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.xml.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(xml|xsd|tld|jsp|pt|cpt|dtml|rss|opml)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.xml",
              "patterns": [
                {
                  "include": "text.xml"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.xsl.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(xsl|xslt)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.xsl",
              "patterns": [
                {
                  "include": "text.xml.xsl"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.yaml.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(yaml|yml)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.yaml",
              "patterns": [
                {
                  "include": "source.yaml"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.dosbatch.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(bat|batch)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.dosbatch",
              "patterns": [
                {
                  "include": "source.batchfile"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.clojure.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(clj|cljs|clojure)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.clojure",
              "patterns": [
                {
                  "include": "source.clojure"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.coffee.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(coffee|Cakefile|coffee.erb)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.coffee",
              "patterns": [
                {
                  "include": "source.coffee"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.c.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(c|h)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.c",
              "patterns": [
                {
                  "include": "source.c"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.cpp.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(cpp|c\\+\\+|cxx)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.cpp source.cpp",
              "patterns": [
                {
                  "include": "source.cpp"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.diff.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(patch|diff|rej)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.diff",
              "patterns": [
                {
                  "include": "source.diff"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.dockerfile.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(dockerfile|Dockerfile)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.dockerfile",
              "patterns": [
                {
                  "include": "source.dockerfile"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.git_commit.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(COMMIT_EDITMSG|MERGE_MSG)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.git_commit",
              "patterns": [
                {
                  "include": "text.git-commit"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.git_rebase.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(git-rebase-todo)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.git_rebase",
              "patterns": [
                {
                  "include": "text.git-rebase"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.go.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(go|golang)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.go",
              "patterns": [
                {
                  "include": "source.go"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.groovy.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(groovy|gvy)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.groovy",
              "patterns": [
                {
                  "include": "source.groovy"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.pug.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(jade|pug)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.pug",
              "patterns": [
                {
                  "include": "text.pug"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.js.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(js|jsx|javascript|es6|mjs|cjs|dataviewjs|\\{\\.js.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.javascript",
              "patterns": [
                {
                  "include": "source.js"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.js_regexp.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(regexp)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.js_regexp",
              "patterns": [
                {
                  "include": "source.js.regexp"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.json.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(json|json5|sublime-settings|sublime-menu|sublime-keymap|sublime-mousemap|sublime-theme|sublime-build|sublime-project|sublime-completions)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.json",
              "patterns": [
                {
                  "include": "source.json"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.jsonc.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(jsonc)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.jsonc",
              "patterns": [
                {
                  "include": "source.json.comments"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.less.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(less)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.less",
              "patterns": [
                {
                  "include": "source.css.less"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.objc.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(objectivec|objective-c|mm|objc|obj-c|m|h)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.objc",
              "patterns": [
                {
                  "include": "source.objc"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.swift.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(swift)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.swift",
              "patterns": [
                {
                  "include": "source.swift"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.scss.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(scss)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.scss",
              "patterns": [
                {
                  "include": "source.css.scss"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.perl6.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(perl6|p6|pl6|pm6|nqp)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.perl6",
              "patterns": [
                {
                  "include": "source.perl.6"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.powershell.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(powershell|ps1|psm1|psd1|pwsh)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.powershell",
              "patterns": [
                {
                  "include": "source.powershell"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.python.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(python|py|py3|rpy|pyw|cpy|SConstruct|Sconstruct|sconstruct|SConscript|gyp|gypi|\\{\\.python.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.python",
              "patterns": [
                {
                  "include": "source.python"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.julia.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(julia|\\{\\.julia.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.julia",
              "patterns": [
                {
                  "include": "source.julia"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.regexp_python.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(re)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.regexp_python",
              "patterns": [
                {
                  "include": "source.regexp.python"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.rust.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(rust|rs|\\{\\.rust.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.rust",
              "patterns": [
                {
                  "include": "source.rust"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.scala.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(scala|sbt)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.scala",
              "patterns": [
                {
                  "include": "source.scala"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.shell.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(shell|sh|bash|zsh|bashrc|bash_profile|bash_login|profile|bash_logout|.textmate_init|\\{\\.bash.+?\\})((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.shellscript",
              "patterns": [
                {
                  "include": "source.shell"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.ts.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(typescript|ts)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.typescript",
              "patterns": [
                {
                  "include": "source.ts"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.tsx.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(tsx)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.typescriptreact",
              "patterns": [
                {
                  "include": "source.tsx"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.csharp.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(cs|csharp|c#)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.csharp",
              "patterns": [
                {
                  "include": "source.cs"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.fsharp.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(fs|fsharp|f#)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.fsharp",
              "patterns": [
                {
                  "include": "source.fsharp"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.dart.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(dart)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.dart",
              "patterns": [
                {
                  "include": "source.dart"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.handlebars.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(handlebars|hbs)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.handlebars",
              "patterns": [
                {
                  "include": "text.html.handlebars"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.markdown.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(markdown|md)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.markdown",
              "patterns": [
                {
                  "include": "text.html.markdown"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.log.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(log)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.log",
              "patterns": [
                {
                  "include": "text.log"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.erlang.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(erlang)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.erlang",
              "patterns": [
                {
                  "include": "source.erlang"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.elixir.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(elixir)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.elixir",
              "patterns": [
                {
                  "include": "source.elixir"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.latex.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(latex|tex)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.latex",
              "patterns": [
                {
                  "include": "text.tex.latex"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.bibtex.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(bibtex)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.bibtex",
              "patterns": [
                {
                  "include": "text.bibtex"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.twig.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(twig)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.twig",
              "patterns": [
                {
                  "include": "source.twig"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.yang.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(yang)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.yang",
              "patterns": [
                {
                  "include": "source.yang"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.abap.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(abap)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.abap",
              "patterns": [
                {
                  "include": "source.abap"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.restructuredtext.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(restructuredtext|rst)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.restructuredtext",
              "patterns": [
                {
                  "include": "source.rst"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.haskell.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(haskell)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.haskell",
              "patterns": [
                {
                  "include": "source.haskell"
                }
              ]
            }
          ]
        },
        {
          "name": "markup.code.kotlin.asciidoc",
          "begin": "(^|\\G)(`{3,})\\s*(?i:(kotlin|kt)((\\s+|:|,|\\{|\\?)[^`]*)?$)",
          "end": "(^|\\G)(\\2)\\s*$",
          "patterns": [
            {
              "include": "#block-callout"
            },
            {
              "begin": "(^|\\G)(\\s*)(.*)",
              "while": "(^|\\G)(?!\\s*([`]{3,})\\s*$)",
              "contentName": "meta.embedded.block.kotlin",
              "patterns": [
                {
                  "include": "source.kotlin"
                }
              ]
            }
          ]
        }
      ]
    }
  }
}